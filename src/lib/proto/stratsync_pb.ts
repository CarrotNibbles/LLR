// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file stratsync.proto (package stratsync, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message stratsync.SubscriptionRequest
 */
export class SubscriptionRequest extends Message<SubscriptionRequest> {
  /**
   * @generated from field: string strategy = 1;
   */
  strategy = "";

  constructor(data?: PartialMessage<SubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stratsync.SubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "strategy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscriptionRequest {
    return new SubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscriptionRequest {
    return new SubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscriptionRequest {
    return new SubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubscriptionRequest | PlainMessage<SubscriptionRequest> | undefined, b: SubscriptionRequest | PlainMessage<SubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(SubscriptionRequest, a, b);
  }
}

/**
 * @generated from message stratsync.DamageOption
 */
export class DamageOption extends Message<DamageOption> {
  /**
   * @generated from field: string damage = 1;
   */
  damage = "";

  /**
   * @generated from field: optional int32 num_shared = 2;
   */
  numShared?: number;

  /**
   * @generated from field: optional string primary_target = 3;
   */
  primaryTarget?: string;

  constructor(data?: PartialMessage<DamageOption>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stratsync.DamageOption";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "damage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "num_shared", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 3, name: "primary_target", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DamageOption {
    return new DamageOption().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DamageOption {
    return new DamageOption().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DamageOption {
    return new DamageOption().fromJsonString(jsonString, options);
  }

  static equals(a: DamageOption | PlainMessage<DamageOption> | undefined, b: DamageOption | PlainMessage<DamageOption> | undefined): boolean {
    return proto3.util.equals(DamageOption, a, b);
  }
}

/**
 * @generated from message stratsync.Player
 */
export class Player extends Message<Player> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional string job = 2;
   */
  job?: string;

  /**
   * @generated from field: int32 order = 3;
   */
  order = 0;

  constructor(data?: PartialMessage<Player>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stratsync.Player";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "job", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "order", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Player {
    return new Player().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Player {
    return new Player().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Player {
    return new Player().fromJsonString(jsonString, options);
  }

  static equals(a: Player | PlainMessage<Player> | undefined, b: Player | PlainMessage<Player> | undefined): boolean {
    return proto3.util.equals(Player, a, b);
  }
}

/**
 * @generated from message stratsync.Entry
 */
export class Entry extends Message<Entry> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string player = 2;
   */
  player = "";

  /**
   * @generated from field: string action = 3;
   */
  action = "";

  /**
   * @generated from field: int32 use_at = 4;
   */
  useAt = 0;

  constructor(data?: PartialMessage<Entry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stratsync.Entry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "player", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "use_at", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Entry {
    return new Entry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Entry {
    return new Entry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Entry {
    return new Entry().fromJsonString(jsonString, options);
  }

  static equals(a: Entry | PlainMessage<Entry> | undefined, b: Entry | PlainMessage<Entry> | undefined): boolean {
    return proto3.util.equals(Entry, a, b);
  }
}

/**
 * @generated from message stratsync.InitializationEvent
 */
export class InitializationEvent extends Message<InitializationEvent> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: repeated stratsync.Player players = 2;
   */
  players: Player[] = [];

  /**
   * @generated from field: repeated stratsync.DamageOption damage_options = 3;
   */
  damageOptions: DamageOption[] = [];

  /**
   * @generated from field: repeated stratsync.Entry entries = 4;
   */
  entries: Entry[] = [];

  constructor(data?: PartialMessage<InitializationEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stratsync.InitializationEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "players", kind: "message", T: Player, repeated: true },
    { no: 3, name: "damage_options", kind: "message", T: DamageOption, repeated: true },
    { no: 4, name: "entries", kind: "message", T: Entry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InitializationEvent {
    return new InitializationEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InitializationEvent {
    return new InitializationEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InitializationEvent {
    return new InitializationEvent().fromJsonString(jsonString, options);
  }

  static equals(a: InitializationEvent | PlainMessage<InitializationEvent> | undefined, b: InitializationEvent | PlainMessage<InitializationEvent> | undefined): boolean {
    return proto3.util.equals(InitializationEvent, a, b);
  }
}

/**
 * @generated from message stratsync.ClearOtherSessionsRequest
 */
export class ClearOtherSessionsRequest extends Message<ClearOtherSessionsRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<ClearOtherSessionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stratsync.ClearOtherSessionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClearOtherSessionsRequest {
    return new ClearOtherSessionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClearOtherSessionsRequest {
    return new ClearOtherSessionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClearOtherSessionsRequest {
    return new ClearOtherSessionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClearOtherSessionsRequest | PlainMessage<ClearOtherSessionsRequest> | undefined, b: ClearOtherSessionsRequest | PlainMessage<ClearOtherSessionsRequest> | undefined): boolean {
    return proto3.util.equals(ClearOtherSessionsRequest, a, b);
  }
}

/**
 * @generated from message stratsync.ElevationRequest
 */
export class ElevationRequest extends Message<ElevationRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<ElevationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stratsync.ElevationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ElevationRequest {
    return new ElevationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ElevationRequest {
    return new ElevationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ElevationRequest {
    return new ElevationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ElevationRequest | PlainMessage<ElevationRequest> | undefined, b: ElevationRequest | PlainMessage<ElevationRequest> | undefined): boolean {
    return proto3.util.equals(ElevationRequest, a, b);
  }
}

/**
 * @generated from message stratsync.UpsertDamageOptionRequest
 */
export class UpsertDamageOptionRequest extends Message<UpsertDamageOptionRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: stratsync.DamageOption damage_option = 2;
   */
  damageOption?: DamageOption;

  constructor(data?: PartialMessage<UpsertDamageOptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stratsync.UpsertDamageOptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "damage_option", kind: "message", T: DamageOption },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertDamageOptionRequest {
    return new UpsertDamageOptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertDamageOptionRequest {
    return new UpsertDamageOptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertDamageOptionRequest {
    return new UpsertDamageOptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertDamageOptionRequest | PlainMessage<UpsertDamageOptionRequest> | undefined, b: UpsertDamageOptionRequest | PlainMessage<UpsertDamageOptionRequest> | undefined): boolean {
    return proto3.util.equals(UpsertDamageOptionRequest, a, b);
  }
}

/**
 * @generated from message stratsync.MutateEntriesRequest
 */
export class MutateEntriesRequest extends Message<MutateEntriesRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: repeated stratsync.Entry upserts = 2;
   */
  upserts: Entry[] = [];

  /**
   * @generated from field: repeated string deletes = 3;
   */
  deletes: string[] = [];

  constructor(data?: PartialMessage<MutateEntriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stratsync.MutateEntriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "upserts", kind: "message", T: Entry, repeated: true },
    { no: 3, name: "deletes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MutateEntriesRequest {
    return new MutateEntriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MutateEntriesRequest {
    return new MutateEntriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MutateEntriesRequest {
    return new MutateEntriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MutateEntriesRequest | PlainMessage<MutateEntriesRequest> | undefined, b: MutateEntriesRequest | PlainMessage<MutateEntriesRequest> | undefined): boolean {
    return proto3.util.equals(MutateEntriesRequest, a, b);
  }
}

/**
 * @generated from message stratsync.UpdatePlayerJobRequest
 */
export class UpdatePlayerJobRequest extends Message<UpdatePlayerJobRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: optional string job = 3;
   */
  job?: string;

  constructor(data?: PartialMessage<UpdatePlayerJobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stratsync.UpdatePlayerJobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "job", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePlayerJobRequest {
    return new UpdatePlayerJobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePlayerJobRequest {
    return new UpdatePlayerJobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePlayerJobRequest {
    return new UpdatePlayerJobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePlayerJobRequest | PlainMessage<UpdatePlayerJobRequest> | undefined, b: UpdatePlayerJobRequest | PlainMessage<UpdatePlayerJobRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePlayerJobRequest, a, b);
  }
}

/**
 * @generated from message stratsync.UpsertDamageOptionEvent
 */
export class UpsertDamageOptionEvent extends Message<UpsertDamageOptionEvent> {
  /**
   * @generated from field: stratsync.DamageOption damage_option = 1;
   */
  damageOption?: DamageOption;

  constructor(data?: PartialMessage<UpsertDamageOptionEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stratsync.UpsertDamageOptionEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "damage_option", kind: "message", T: DamageOption },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertDamageOptionEvent {
    return new UpsertDamageOptionEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertDamageOptionEvent {
    return new UpsertDamageOptionEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertDamageOptionEvent {
    return new UpsertDamageOptionEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertDamageOptionEvent | PlainMessage<UpsertDamageOptionEvent> | undefined, b: UpsertDamageOptionEvent | PlainMessage<UpsertDamageOptionEvent> | undefined): boolean {
    return proto3.util.equals(UpsertDamageOptionEvent, a, b);
  }
}

/**
 * @generated from message stratsync.MutateEntriesEvent
 */
export class MutateEntriesEvent extends Message<MutateEntriesEvent> {
  /**
   * @generated from field: repeated stratsync.Entry upserts = 1;
   */
  upserts: Entry[] = [];

  /**
   * @generated from field: repeated string deletes = 2;
   */
  deletes: string[] = [];

  constructor(data?: PartialMessage<MutateEntriesEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stratsync.MutateEntriesEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "upserts", kind: "message", T: Entry, repeated: true },
    { no: 2, name: "deletes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MutateEntriesEvent {
    return new MutateEntriesEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MutateEntriesEvent {
    return new MutateEntriesEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MutateEntriesEvent {
    return new MutateEntriesEvent().fromJsonString(jsonString, options);
  }

  static equals(a: MutateEntriesEvent | PlainMessage<MutateEntriesEvent> | undefined, b: MutateEntriesEvent | PlainMessage<MutateEntriesEvent> | undefined): boolean {
    return proto3.util.equals(MutateEntriesEvent, a, b);
  }
}

/**
 * @generated from message stratsync.UpdatePlayerJobEvent
 */
export class UpdatePlayerJobEvent extends Message<UpdatePlayerJobEvent> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional string job = 2;
   */
  job?: string;

  constructor(data?: PartialMessage<UpdatePlayerJobEvent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stratsync.UpdatePlayerJobEvent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "job", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePlayerJobEvent {
    return new UpdatePlayerJobEvent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePlayerJobEvent {
    return new UpdatePlayerJobEvent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePlayerJobEvent {
    return new UpdatePlayerJobEvent().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePlayerJobEvent | PlainMessage<UpdatePlayerJobEvent> | undefined, b: UpdatePlayerJobEvent | PlainMessage<UpdatePlayerJobEvent> | undefined): boolean {
    return proto3.util.equals(UpdatePlayerJobEvent, a, b);
  }
}

/**
 * @generated from message stratsync.EventResponse
 */
export class EventResponse extends Message<EventResponse> {
  /**
   * @generated from oneof stratsync.EventResponse.event
   */
  event: {
    /**
     * @generated from field: stratsync.InitializationEvent initialization_event = 1;
     */
    value: InitializationEvent;
    case: "initializationEvent";
  } | {
    /**
     * @generated from field: stratsync.UpsertDamageOptionEvent upsert_damage_option_event = 2;
     */
    value: UpsertDamageOptionEvent;
    case: "upsertDamageOptionEvent";
  } | {
    /**
     * @generated from field: stratsync.MutateEntriesEvent mutate_entries_event = 3;
     */
    value: MutateEntriesEvent;
    case: "mutateEntriesEvent";
  } | {
    /**
     * @generated from field: stratsync.UpdatePlayerJobEvent update_player_job_event = 4;
     */
    value: UpdatePlayerJobEvent;
    case: "updatePlayerJobEvent";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<EventResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "stratsync.EventResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "initialization_event", kind: "message", T: InitializationEvent, oneof: "event" },
    { no: 2, name: "upsert_damage_option_event", kind: "message", T: UpsertDamageOptionEvent, oneof: "event" },
    { no: 3, name: "mutate_entries_event", kind: "message", T: MutateEntriesEvent, oneof: "event" },
    { no: 4, name: "update_player_job_event", kind: "message", T: UpdatePlayerJobEvent, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventResponse {
    return new EventResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventResponse {
    return new EventResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventResponse {
    return new EventResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EventResponse | PlainMessage<EventResponse> | undefined, b: EventResponse | PlainMessage<EventResponse> | undefined): boolean {
    return proto3.util.equals(EventResponse, a, b);
  }
}

